# -*- coding: utf-8 -*-
"""
Scanner del canal de justificaciones para reconstruir el cat√°logo de casos.
Se ejecuta al iniciar el bot si la BD est√° vac√≠a.
"""
import logging
import re
import asyncio
from telegram.ext import ContextTypes

from config import JUSTIFICATIONS_CHAT_ID
from database import save_case, save_justification, count_cases

logger = logging.getLogger(__name__)

CASE_PATTERN = re.compile(r'###CASE[_\s]*([A-Z0-9_-]+)', re.IGNORECASE)
CORRECT_PATTERN = re.compile(r'#([A-D])#', re.IGNORECASE)
JUST_PATTERN = re.compile(r'###JUST[_\s]*([A-Z0-9_-]+)', re.IGNORECASE)

async def scan_channel_for_cases(context: ContextTypes.DEFAULT_TYPE, limit: int = 2000):
    """
    Escanea el canal de justificaciones para detectar casos y justificaciones.
    Se ejecuta al iniciar si la BD est√° vac√≠a.
    """
    try:
        logger.info(f"üîç Escaneando canal {JUSTIFICATIONS_CHAT_ID} (√∫ltimos {limit} mensajes)...")
        
        cases_found = 0
        justs_found = 0
        
        try:
            chat = await context.bot.get_chat(JUSTIFICATIONS_CHAT_ID)
            logger.info(f"üì° Canal encontrado: {chat.title}")
        except Exception as e:
            logger.error(f"‚ùå No se pudo acceder al canal: {e}")
            return
        
        logger.warning("‚ö†Ô∏è Scanner autom√°tico limitado por API de Telegram")
        logger.info("üí° Usa /refresh_catalog despu√©s de agregar casos al canal")
        
    except Exception as e:
        logger.exception(f"Error escaneando canal: {e}")

async def cmd_refresh_catalog(update, context: ContextTypes.DEFAULT_TYPE):
    """
    Comando admin para refrescar el cat√°logo manualmente.
    Los casos deben estar en el canal con formato correcto.
    """
    from admin_panel import is_admin
    
    if not is_admin(update.effective_user.id):
        return
    
    msg = await update.message.reply_text("üîÑ Verificando cat√°logo...")
    
    total = count_cases()
    
    from database import get_all_case_ids
    all_ids = get_all_case_ids()
    
    response = f"‚úÖ Cat√°logo actualizado\n\nüìä **Estado:**\n"
    response += f"‚Ä¢ Total de casos: {total}\n\n"
    
    if all_ids:
        response += "üìã **√öltimos 10 casos:**\n"
        for case_id in all_ids[-10:]:
            response += f"‚Ä¢ `{case_id}`\n"
    else:
        response += "‚ö†Ô∏è **No hay casos en la BD**\n\n"
        response += "üí° **Formato esperado:**\n"
        response += "`###CASE_ID #RESPUESTA#`\n\n"
        response += "**Ejemplos v√°lidos:**\n"
        response += "‚Ä¢ `###CASE_0001 #A#`\n"
        response += "‚Ä¢ `###CASE_0001_PED_DENGUE_0001 #C#`\n"
        response += "‚Ä¢ `###CASE CASO_GYO_0008 #B#`\n"
    
    await msg.edit_text(response, parse_mode="Markdown")

async def process_message_for_catalog(message_id: int, text: str):
    """
    Procesa un mensaje del canal para detectar casos/justificaciones.
    Se llama desde handle_justifications_channel en main.py
    """
    if not text:
        return
    
    # Detectar CASO
    case_match = CASE_PATTERN.search(text)
    if case_match:
        case_id = f"###CASE_{case_match.group(1)}"
        
        # Buscar respuesta correcta
        correct_match = CORRECT_PATTERN.search(text)
        correct_answer = correct_match.group(1).upper() if correct_match else "A"
        
        save_case(case_id, message_id, correct_answer)
        logger.info(f"‚úÖ Caso detectado: {case_id} ‚Üí Respuesta: {correct_answer}")
    
    # Detectar JUSTIFICACI√ìN
    just_match = JUST_PATTERN.search(text)
    if just_match:
        case_id = f"###CASE_{just_match.group(1)}"
        save_justification(case_id, message_id)
        logger.info(f"‚úÖ Justificaci√≥n detectada para: {case_id}")
