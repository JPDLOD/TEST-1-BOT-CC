#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Bot separado SOLO para entregar justificaciones
NO interfiere con el bot principal
"""

import os
import logging
import asyncio
import random
from typing import Dict, List
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError

# ========= CONFIGURACI√ìN =========
BOT_TOKEN = "8256996324:AAH2cD9VBEK7iQrlmiwCi11zwOzAJgyg1d4"  # @JUST_CC_bot
JUSTIFICATIONS_CHAT_ID = -1003058530208  # Canal de justificaciones
AUTO_DELETE_MINUTES = 10  # Tiempo antes de borrar
MAX_CONCURRENT_REQUESTS = 10  # M√°ximo de solicitudes concurrentes por usuario

# ========= LOGGING =========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========= CACHE Y CONTROL =========
user_sessions: Dict[int, Dict] = {}  # {user_id: {"messages": [], "task": asyncio.Task, "semaphore": asyncio.Semaphore}}

# ========= MENSAJES ALEATORIOS =========
SUCCESS_MESSAGES = [
    "üìö ¬°Justificaci√≥n lista! Revisa con calma.",
    "‚ú® Material de estudio enviado.",
    "üéØ ¬°Justificaci√≥n disponible!",
    "üìñ Contenido acad√©mico listo para revisar.",
    "üíä Tu dosis de conocimiento ha sido enviada.",
    "ü©∫ Diagn√≥stico: Necesitas esta justificaci√≥n. Tratamiento: Leerla.",
    "üìã Historia cl√≠nica del caso: Completa.",
    "üî¨ Resultados del laboratorio de conocimiento listos.",
    "üíâ Inyecci√≥n de sabidur√≠a administrada con √©xito.",
    "üè• Interconsulta con la justificaci√≥n: Aprobada.",
    "üöë Justificaci√≥n de emergencia despachada.",
    "üë®‚Äç‚öïÔ∏è El Dr. Bot te envi√≥ la justificaci√≥n STAT!",
    "ü´Ä Tu nodo SA est√° enviando impulsos de felicidad.",
    "üß¨ Mutaci√≥n detectada en el gen del conocimiento: +100 IQ.",
    "üíä Farmacocin√©tica: Absorci√≥n inmediata.",
    "ü¶† Gram positivo para el aprendizaje.",
    "ü©∏ Tu Hb subi√≥ 2 puntos solo de ver esta justificaci√≥n.",
    "üß† Neuronas activadas exitosamente.",
    "üìö Como el caf√© del hospital: Necesario aunque no sea el mejor.",
    "üéì Un paso m√°s cerca de la residencia.",
]

# ========= FUNCIONES PRINCIPALES =========

async def send_justification(
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    justification_id: int
) -> bool:
    """Env√≠a una justificaci√≥n individual con protecci√≥n."""
    try:
        # Copiar mensaje protegido
        sent = await context.bot.copy_message(
            chat_id=user_id,
            from_chat_id=JUSTIFICATIONS_CHAT_ID,
            message_id=justification_id,
            protect_content=True
        )
        
        if sent:
            # Agregar a la sesi√≥n del usuario
            if user_id not in user_sessions:
                user_sessions[user_id] = {"messages": [], "task": None, "semaphore": asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)}
            
            user_sessions[user_id]["messages"].append(sent.message_id)
            logger.info(f"‚úÖ Justificaci√≥n {justification_id} enviada a usuario {user_id}")
            return True
            
    except TelegramError as e:
        logger.error(f"‚ùå Error enviando justificaci√≥n {justification_id}: {e}")
    
    return False

async def handle_justification_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja solicitudes de justificaci√≥n con mejor concurrencia."""
    if not update.message or not update.message.text:
        return
    
    text = update.message.text.strip()
    user_id = update.message.from_user.id
    
    # Extraer ID de justificaci√≥n
    if text.startswith("/start just_"):
        try:
            # Extraer ID √∫nico (por ahora solo soportamos uno por solicitud)
            id_part = text.replace("/start just_", "").split("_")[0]
            justification_id = int(id_part)
        except:
            await update.message.reply_text("‚ùå Enlace inv√°lido.")
            return
    elif text.startswith("/just"):
        # Comando directo /just 123
        try:
            justification_id = int(text.split()[1])
        except:
            await update.message.reply_text("‚ùå Usa: /just <n√∫mero>")
            return
    else:
        return
    
    # Crear sem√°foro para el usuario si no existe
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            "messages": [],
            "task": None,
            "semaphore": asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)
        }
    
    user_session = user_sessions[user_id]
    
    # Usar sem√°foro para controlar concurrencia
    async with user_session["semaphore"]:
        # Enviar mensaje de procesando
        processing = await update.message.reply_text("üîÑ Obteniendo justificaci√≥n...")
        
        try:
            # Enviar justificaci√≥n
            success = await send_justification(context, user_id, justification_id)
            
            # Borrar mensaje de procesando
            await processing.delete()
            
            if success:
                # Enviar mensaje aleatorio de √©xito
                success_msg = await update.message.reply_text(
                    random.choice(SUCCESS_MESSAGES),
                    disable_notification=True
                )
                
                # Agregar mensaje de √©xito a la lista para borrar despu√©s
                user_session["messages"].append(success_msg.message_id)
                
                # Programar eliminaci√≥n
                if AUTO_DELETE_MINUTES > 0:
                    await schedule_deletion(context, user_id)
            else:
                await update.message.reply_text(
                    "‚ùå No se pudo obtener la justificaci√≥n. Verifica el ID.",
                    disable_notification=True
                )
                
        except Exception as e:
            logger.error(f"Error procesando solicitud: {e}")
            try:
                await processing.delete()
            except:
                pass
            await update.message.reply_text("‚ùå Error inesperado. Intenta de nuevo.")

async strongly schedule_deletion(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """Programa la eliminaci√≥n de mensajes despu√©s del tiempo configurado."""
    if user_id not in user_sessions:
        return
    
    user_session = user_sessions[user_id]
    
    # Cancelar tarea anterior si existe
    if user_session.get("task"):
        user_session["task"].cancel()
    
    async def delete_messages():
        try:
            await asyncio.sleep(AUTO_DELETE_MINUTES * 60)
            
            # Borrar todos los mensajes del usuario
            for msg_id in user_session["messages"]:
                try:
                    await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
                except:
                    pass
            
            # Limpiar sesi√≥n
            if user_id in user_sessions:
                del user_sessions[user_id]
            
            logger.info(f"üóëÔ∏è Mensajes eliminados para usuario {user_id}")
            
        except asyncio.CancelledError:
            pass
        except Exception as e:
            logger.error(f"Error en eliminaci√≥n autom√°tica: {e}")
    
    # Crear nueva tarea
    task = asyncio.create_task(delete_messages())
    user_session["task"] = task

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start general."""
    if context.args and context.args[0].startswith("just_"):
        # Es una justificaci√≥n
        await handle_justification_request(update, context)
    else:
        # Mensaje de bienvenida
        await update.message.reply_text(
            "ü©∫ *Bot de Justificaciones M√©dicas*\n\n"
            "Este bot te entrega justificaciones protegidas de casos cl√≠nicos.\n\n"
            "üìö *C√≥mo funciona:*\n"
            "1. Recibe un enlace de justificaci√≥n\n"
            "2. Haz click en el enlace\n"
            "3. Recibir√°s el material protegido\n"
            "4. Se auto-eliminar√° en 10 minutos\n\n"
            "üí° *Comandos:*\n"
            "‚Ä¢ `/just <n√∫mero>` - Obtener justificaci√≥n directa\n"
            "‚Ä¢ `/ayuda` - Ver esta informaci√≥n\n\n"
            "_Bot exclusivo para estudiantes de medicina_",
            parse_mode="Markdown"
        )

async def cmd_just(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando directo /just <id>."""
    await handle_justification_request(update, context)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando de ayuda."""
    await cmd_start(update, context)

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Estado del bot (admin)."""
    user_id = update.message.from_user.id
    
    # Solo para admins (puedes agregar IDs de admin aqu√≠)
    ADMIN_IDS = [123456789]  # Agrega tu ID aqu√≠
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå No autorizado")
        return
    
    active_sessions = len(user_sessions)
    total_messages = sum(len(s["messages"]) for s in user_sessions.values())
    
    status_text = (
        f"üìä *Estado del Bot*\n\n"
        f"‚Ä¢ Sesiones activas: {active_sessions}\n"
        f"‚Ä¢ Mensajes pendientes: {total_messages}\n"
        f"‚Ä¢ Auto-eliminaci√≥n: {AUTO_DELETE_MINUTES} min\n"
        f"‚Ä¢ Canal fuente: `{JUSTIFICATIONS_CHAT_ID}`"
    )
    
    await update.message.reply_text(status_text, parse_mode="Markdown")

# ========= MAIN =========
def main():
    """Funci√≥n principal del bot."""
    # Crear aplicaci√≥n
    app = Application.builder().token(BOT_TOKEN).build()
    
    # Agregar handlers
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("just", cmd_just))
    app.add_handler(CommandHandler("ayuda", cmd_help))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("status", cmd_status))
    
    # Handler para deep links
    app.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r"^/start just_\d+"),
        handle_justification_request
    ))
    
    logger.info("üöÄ Bot de Justificaciones iniciado!")
    logger.info(f"üìö Canal fuente: {JUSTIFICATIONS_CHAT_ID}")
    logger.info(f"‚è∞ Auto-eliminaci√≥n: {AUTO_DELETE_MINUTES} minutos")
    
    # Iniciar bot
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()