# -*- coding: utf-8 -*-
"""
Sistema de Justificaciones Protegidas - VERSI√ìN CORREGIDA
Maneja deep-links para enviar justificaciones espec√≠ficas desde un canal de justificaciones
"""

import logging
import asyncio
import re
from typing import Optional, Dict, Set, List
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters
from telegram.error import TelegramError

from config import TZ

logger = logging.getLogger(__name__)

# ========= CONFIGURACI√ìN DE JUSTIFICACIONES =========
JUSTIFICATIONS_CHAT_ID = -1003058530208  # Canal de justificaciones
AUTO_DELETE_MINUTES = 10  # Tiempo antes de borrar la justificaci√≥n (0 = no borrar)

# Cache para rastrear mensajes enviados y sus timers de eliminaci√≥n
sent_justifications: Dict[str, Dict] = {}  # {user_id_message_id: {chat_id, message_id, timer_task}}

# ========= DETECCI√ìN DE JUSTIFICACIONES EN MENSAJES =========

# Patr√≥n para detectar enlaces de justificaci√≥n en mensajes
# Ejemplo: https://t.me/c/1058530208/4 -> mensaje ID 4
JUSTIFICATION_LINK_PATTERN = re.compile(
    r'https://t\.me/c/(\d+)/(\d+)',
    re.IGNORECASE
)

def detect_justification_links(text: str) -> List[int]:
    """
    Detecta enlaces de justificaci√≥n en el texto del mensaje.
    Retorna lista de IDs de mensajes de justificaci√≥n.
    """
    if not text:
        return []
    
    links = JUSTIFICATION_LINK_PATTERN.findall(text)
    justification_ids = []
    
    for chat_id_part, message_id in links:
        # Convertir el chat_id del enlace al formato completo
        full_chat_id = f"-100{chat_id_part}"
        
        # Verificar si corresponde al canal de justificaciones
        if int(full_chat_id) == JUSTIFICATIONS_CHAT_ID:
            try:
                justification_ids.append(int(message_id))
                logger.info(f"üìö Link de justificaci√≥n detectado: mensaje {message_id}")
            except ValueError:
                continue
    
    return justification_ids

def extract_case_name(text: str) -> str:
    """
    Extrae el nombre del caso del texto si existe.
    Busca patrones como "CASO #X", "ü§£ CASO #34", etc.
    """
    if not text:
        return ''
    
    # Patrones para detectar nombres de casos
    patterns = [
        r'([ü§£üòÇ]*\s*CASO\s*#\d+[^.\n]*)',
        r'(CASO\s+[^.\n]+)',
        r'(CASP\s*#\d+[^.\n]*)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            case_name = match.group(1).strip()
            logger.info(f"üìù Nombre de caso detectado: '{case_name}'")
            return case_name
    
    return ''

# ========= FUNCIONES AUXILIARES =========

def generate_justification_deep_link(bot_username: str, justification_ids: List[int]) -> str:
    """
    Genera el deep-link para justificaciones m√∫ltiples.
    Formato: https://t.me/BotUsername?start=just_4_5_7
    """
    ids_str = "_".join(str(id) for id in justification_ids)
    return f"https://t.me/{bot_username}?start=just_{ids_str}"

def create_justification_button(bot_username: str, justification_ids: List[int], case_name: str = '') -> InlineKeyboardMarkup:
    """
    Crea el bot√≥n inline "Ver justificaci√≥n üìö" con deep-link.
    """
    deep_link = generate_justification_deep_link(bot_username, justification_ids)
    
    # Personalizar texto del bot√≥n seg√∫n el caso
    if case_name:
        button_text = f"Ver justificaci√≥n {case_name} üìö"
    else:
        button_text = "Ver justificaci√≥n üìö"
    
    button = InlineKeyboardButton(button_text, url=deep_link)
    return InlineKeyboardMarkup([[button]])

async def clean_previous_messages(context: ContextTypes.DEFAULT_TYPE, user_id: int, keep_last_n: int = 0):
    """
    Limpia mensajes anteriores del bot en el chat privado del usuario.
    FUNCI√ìN CORREGIDA - era 'clean_all_previous_messages' en el error.
    """
    try:
        # Obtener historial de mensajes recientes
        # Nota: Esta es una implementaci√≥n simplificada
        # En un caso real, necesitar√≠as mantener un registro de mensajes enviados
        logger.info(f"üßπ Limpiando mensajes anteriores para usuario {user_id}")
        
        # Por ahora, solo limpiar del cache local
        keys_to_remove = []
        for key in sent_justifications.keys():
            if key.startswith(f"{user_id}_"):
                keys_to_remove.append(key)
        
        for key in keys_to_remove:
            sent_justifications.pop(key, None)
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Error limpiando mensajes anteriores: {e}")

async def send_protected_justifications(
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    justification_ids: List[int]
) -> bool:
    """
    Env√≠a m√∫ltiples justificaciones protegidas al usuario.
    FUNCI√ìN CORREGIDA para manejar m√∫ltiples justificaciones.
    """
    
    try:
        logger.info(f"üìã Enviando justificaciones {justification_ids} a usuario {user_id}")
        
        # Limpiar mensajes anteriores del bot
        await clean_previous_messages(context, user_id, 0)
        
        success_count = 0
        
        for justification_id in justification_ids:
            try:
                # Copiar el mensaje desde el canal de justificaciones al usuario
                copied_message = await context.bot.copy_message(
                    chat_id=user_id,
                    from_chat_id=JUSTIFICATIONS_CHAT_ID,
                    message_id=justification_id,
                    protect_content=True  # PROTECCI√ìN: No se puede copiar/reenviar/capturar
                )
                
                if copied_message:
                    success_count += 1
                    logger.info(f"‚úÖ Justificaci√≥n {justification_id} enviada a {user_id}")
                    
                    # Programar auto-eliminaci√≥n si est√° configurada
                    if AUTO_DELETE_MINUTES > 0:
                        await schedule_message_deletion(
                            context, 
                            user_id, 
                            copied_message.message_id, 
                            justification_id
                        )
                else:
                    logger.error(f"‚ùå No se pudo copiar justificaci√≥n {justification_id}")
                    
                # Peque√±a pausa entre env√≠os
                await asyncio.sleep(0.2)
                    
            except TelegramError as e:
                logger.error(f"‚ùå Error enviando justificaci√≥n {justification_id}: {e}")
                continue
        
        return success_count > 0
        
    except Exception as e:
        logger.exception(f"‚ùå Error inesperado enviando justificaciones: {e}")
        return False

async def schedule_message_deletion(
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    message_id: int,
    justification_id: int
):
    """
    Programa la eliminaci√≥n autom√°tica de una justificaci√≥n despu√©s del tiempo configurado.
    """
    
    # Crear una tarea asyncio para la eliminaci√≥n
    async def delete_justification():
        try:
            # Esperar el tiempo configurado
            await asyncio.sleep(AUTO_DELETE_MINUTES * 60)
            
            # Intentar borrar el mensaje
            await context.bot.delete_message(chat_id=user_id, message_id=message_id)
            logger.info(f"üóëÔ∏è Auto-eliminada justificaci√≥n {justification_id} del usuario {user_id}")
            
            # Notificar al usuario que se elimin√≥
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üïê La justificaci√≥n se ha eliminado autom√°ticamente por seguridad.",
                    disable_notification=True
                )
            except:
                pass  # Si no se puede notificar, no importa
                
        except TelegramError as e:
            if "message not found" not in str(e).lower():
                logger.warning(f"‚ö†Ô∏è No se pudo auto-eliminar justificaci√≥n: {e}")
        except Exception as e:
            logger.error(f"‚ùå Error en auto-eliminaci√≥n: {e}")
        finally:
            # Limpiar del cache
            cache_key = f"{user_id}_{message_id}"
            sent_justifications.pop(cache_key, None)
    
    # Crear y guardar la tarea
    deletion_task = asyncio.create_task(delete_justification())
    cache_key = f"{user_id}_{message_id}"
    
    sent_justifications[cache_key] = {
        "user_id": user_id,
        "message_id": message_id,
        "justification_id": justification_id,
        "sent_at": datetime.now(tz=TZ),
        "deletion_task": deletion_task
    }
    
    logger.info(f"‚è∞ Programada auto-eliminaci√≥n de justificaci√≥n {justification_id} en {AUTO_DELETE_MINUTES} minutos")

async def handle_justification_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    Maneja las solicitudes de justificaci√≥n que llegan v√≠a deep-link /start just_ID1_ID2_ID3
    FUNCI√ìN CORREGIDA para manejar m√∫ltiples IDs.
    """
    
    if not update.message or not update.message.text:
        return False
    
    text = update.message.text.strip()
    user_id = update.message.from_user.id
    
    # Verificar si es una solicitud de justificaci√≥n
    if not text.startswith("/start just_"):
        return False
    
    # Extraer los IDs de las justificaciones
    try:
        justification_ids_str = text.replace("/start just_", "")
        justification_ids = [int(id_str) for id_str in justification_ids_str.split("_")]
    except ValueError:
        logger.warning(f"‚ö†Ô∏è IDs de justificaci√≥n inv√°lidos: {text}")
        await update.message.reply_text(
            "‚ùå Link de justificaci√≥n inv√°lido. Verifica que el enlace sea correcto."
        )
        return True
    
    logger.info(f"üîç Solicitud de justificaciones {justification_ids} por usuario {user_id}")
    
    # Enviar mensaje de "procesando"
    processing_msg = await update.message.reply_text(
        "üîÑ Obteniendo justificaciones...",
        disable_notification=True
    )
    
    # Intentar enviar las justificaciones
    success = await send_protected_justifications(context, user_id, justification_ids)
    
    # Borrar el mensaje de "procesando"
    try:
        await processing_msg.delete()
    except:
        pass
    
    if success:
        # Mensaje de √©xito con informaci√≥n adicional
        count = len(justification_ids)
        success_text = f"‚úÖ {count} justificaci√≥n(es) enviada(s) con protecci√≥n anti-copia."
        if AUTO_DELETE_MINUTES > 0:
            success_text += f"\nüïê Se eliminar√°n autom√°ticamente en {AUTO_DELETE_MINUTES} minutos."
        
        await update.message.reply_text(
            success_text,
            disable_notification=True
        )
    else:
        await update.message.reply_text(
            "‚ùå No se pudo obtener las justificaciones. Puede que el enlace sea inv√°lido o haya un problema temporal.",
            disable_notification=True
        )
    
    return True

# ========= COMANDOS ADMINISTRATIVOS =========

async def cmd_test_justification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Comando para probar el sistema de justificaciones.
    Uso: /test_just <message_id>
    """
    
    if not context.args:
        await update.message.reply_text("Uso: /test_just <message_id>")
        return
    
    try:
        message_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå ID de mensaje inv√°lido")
        return
    
    user_id = update.message.from_user.id
    success = await send_protected_justifications(context, user_id, [message_id])
    
    if success:
        await update.message.reply_text(f"‚úÖ Justificaci√≥n {message_id} enviada como prueba")
    else:
        await update.message.reply_text(f"‚ùå No se pudo enviar justificaci√≥n {message_id}")

async def cmd_justification_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Muestra estad√≠sticas del sistema de justificaciones.
    """
    
    active_justifications = len(sent_justifications)
    
    stats_text = f"""
üìä **Estad√≠sticas de Justificaciones**

üîí Justificaciones activas: {active_justifications}
üïê Auto-eliminaci√≥n: {'ON' if AUTO_DELETE_MINUTES > 0 else 'OFF'}
üìÅ Canal justificaciones: `{JUSTIFICATIONS_CHAT_ID}`

‚è∞ Tiempo de auto-eliminaci√≥n: {AUTO_DELETE_MINUTES} minutos
"""
    
    if active_justifications > 0:
        stats_text += "\nüìã **Activas actualmente:**\n"
        for cache_key, info in list(sent_justifications.items())[:5]:  # Mostrar solo las primeras 5
            sent_time = info['sent_at'].strftime("%H:%M:%S")
            stats_text += f"‚Ä¢ Usuario {info['user_id']} - Justif {info['justification_id']} ({sent_time})\n"
        
        if active_justifications > 5:
            stats_text += f"... y {active_justifications - 5} m√°s\n"
    
    await update.message.reply_text(stats_text, parse_mode="Markdown")

# ========= FUNCI√ìN PARA INTEGRAR CON EL BOT PRINCIPAL =========

def add_justification_handlers(application):
    """
    Agrega los handlers de justificaciones al bot principal.
    Llamar esta funci√≥n desde main.py despu√©s de crear la aplicaci√≥n.
    """
    
    from telegram.ext import CommandHandler
    
    # Handler para /start just_ID (debe ir ANTES del handler general de /start)
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r"^/start just_[\d_]+$"), 
        handle_justification_request
    ), group=0)  # Grupo 0 para que tenga prioridad
    
    # Comandos administrativos
    application.add_handler(CommandHandler("test_just", cmd_test_justification))
    application.add_handler(CommandHandler("just_stats", cmd_justification_stats))
    
    logger.info("‚úÖ Handlers de justificaciones agregados al bot")

# ========= FUNCI√ìN PARA DETECTAR Y PROCESAR JUSTIFICACIONES =========

async def process_justification_links(
    context: ContextTypes.DEFAULT_TYPE,
    message_id: int,
    text: str,
    previous_message_id: Optional[int] = None
) -> Optional[InlineKeyboardMarkup]:
    """
    Procesa los enlaces de justificaci√≥n en un mensaje y retorna el bot√≥n inline.
    
    Args:
        context: Contexto del bot
        message_id: ID del mensaje actual
        text: Texto del mensaje donde buscar enlaces
        previous_message_id: ID del mensaje anterior (para casos donde el enlace va al mensaje previo)
    
    Returns:
        InlineKeyboardMarkup con el bot√≥n de justificaci√≥n o None
    """
    
    justification_ids = detect_justification_links(text)
    
    if not justification_ids:
        return None
    
    # Extraer nombre del caso si existe
    case_name = extract_case_name(text)
    
    logger.info(f"üìö Justificaciones detectadas: {justification_ids} con caso: '{case_name}'")
    
    # Determinar a qu√© mensaje agregar el bot√≥n
    target_message_id = previous_message_id if previous_message_id else message_id
    
    logger.info(f"üîó Mensaje {message_id}: justificaciones {justification_ids}, caso: '{case_name}'")
    
    try:
        # Obtener info del bot para el deep-link
        bot_info = await context.bot.get_me()
        bot_username = bot_info.username
        
        # Crear el bot√≥n
        keyboard = create_justification_button(bot_username, justification_ids, case_name)
        
        logger.info(f"üìé Bot√≥n 'Ver justificaci√≥n {case_name + ' ' if case_name else ''}üìö' preparado para mensaje {target_message_id}")
        
        return keyboard
        
    except Exception as e:
        logger.error(f"‚ùå Error creando bot√≥n de justificaci√≥n: {e}")
        return None

# ========= FUNCI√ìN PARA USAR EN LAS PUBLICACIONES =========

async def add_justification_button_to_message(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    message_id: int,
    justification_ids: List[int],
    case_name: str = ''
) -> bool:
    """
    Agrega un bot√≥n de justificaci√≥n a un mensaje ya publicado.
    
    Args:
        context: Contexto del bot
        chat_id: ID del chat donde est√° el mensaje
        message_id: ID del mensaje
        justification_ids: IDs de las justificaciones
        case_name: Nombre del caso (opcional)
    
    Returns:
        bool: True si se agreg√≥ exitosamente
    """
    try:
        # Obtener info del bot para el deep-link
        bot_info = await context.bot.get_me()
        bot_username = bot_info.username
        
        # Crear el bot√≥n
        keyboard = create_justification_button(bot_username, justification_ids, case_name)
        
        # Actualizar el mensaje con el bot√≥n
        await context.bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=keyboard
        )
        
        logger.info(f"‚úÖ Bot√≥n de justificaci√≥n agregado a mensaje {message_id} ‚Üí justificaciones {justification_ids}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error agregando bot√≥n de justificaci√≥n: {e}")
        return False
